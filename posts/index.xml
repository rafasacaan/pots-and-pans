<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Posts on pots and pans.</title><link>http://rafasacaan.github.io/pots-and-pans/posts/</link><description>Recent content in Posts on pots and pans.</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 11 Apr 2022 11:00:00 -0300</lastBuildDate><atom:link href="http://rafasacaan.github.io/pots-and-pans/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>workflows with sklearn</title><link>http://rafasacaan.github.io/pots-and-pans/posts/a-simple-workflow/</link><pubDate>Mon, 11 Apr 2022 11:00:00 -0300</pubDate><guid>http://rafasacaan.github.io/pots-and-pans/posts/a-simple-workflow/</guid><description>LetÂ´s take advantage of things that are already built. Im referring to sklearn and the whole variety of beautiful utilities and functions that help us make our lives simpler and stay curious, testing and trying out new stuff. This will be simple and straight to the bone.
A. Splits First, lets take the whole data and leave aside a testing chunk. Then, we can run cross validation on training set and when we think we are ready, we can check our scores on the test set.</description></item><item><title>conda + poetry</title><link>http://rafasacaan.github.io/pots-and-pans/posts/conda-poetry/</link><pubDate>Thu, 03 Feb 2022 15:01:59 -0300</pubDate><guid>http://rafasacaan.github.io/pots-and-pans/posts/conda-poetry/</guid><description>Whenever starting a new project, it is good to get started as nice and easy as possible. The fundamental bricks for this task is to generate an environment and a basic tree of files and directories. And of course, the necessary tools to keep things working from then on.
What else? We can treat our projects as packages right away, and get an awesome package manager such as poetry.
Conda, the environment-maker-manager.</description></item><item><title>trees and rainbows</title><link>http://rafasacaan.github.io/pots-and-pans/posts/first-blog/</link><pubDate>Thu, 03 Feb 2022 15:01:59 -0300</pubDate><guid>http://rafasacaan.github.io/pots-and-pans/posts/first-blog/</guid><description>Remember, remember&amp;hellip;&amp;hellip;
a = c * 7 def hola(): &amp;#34;&amp;#34;&amp;#34; ahjahsjas &amp;#34;&amp;#34;&amp;#34; a = 3 * tu return hey dsada dasd asd adas fdaf sfadadasdasd.</description></item><item><title>virutalenv + pip</title><link>http://rafasacaan.github.io/pots-and-pans/posts/virtualenv-pip/</link><pubDate>Thu, 03 Feb 2022 15:01:59 -0300</pubDate><guid>http://rafasacaan.github.io/pots-and-pans/posts/virtualenv-pip/</guid><description>This is a cheat list for using virtualenv to create python environments, and pip as an install manager.
virtualenv. Create a virtualenv:
python3 -m virtualenv my_env
Activate the env:
source my_env/bin/activate
Deactivate:
deactivate
Remove an env:
rm -rf my_env
pip Generate file with packages:
my_env/bon/python -m pip freeze &amp;gt; requirements.txt
Install packages in env from file:
my_env/bon/python -m pip install -r requirements.</description></item></channel></rss>