[{"content":"Whenever starting a new project, it is good to get started as nice and easy as possible. The fundamental bricks for this task is to generate an environment and a basic tree of files and directories. And of course, the necessary tools to keep things working from then on.\nConda, the environment-maker-manager. Let´s create the most basic python environment, where the most important thing is to have a defined working python version. To do this, we can create a conda lite-weight environment from the following .yaml file:\nname: my_env_name  channels:  - default  - conda-forge  dependencies:  - python=3.8 Please notice that a name and python version are defined inside the file. Now, we can create our very basic env.\nconda env create -f environment.yaml That´s it with conda!\nPoetry, the hard-working-friend. First, we need to install poetry using:\ncurl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py | python - After installing poetry, we can run the following command on the terminal.\npoetry new my_project Several files will be created to get started, among these, a pyproject.toml file which is in charge to manage our dependencies.\nNow, we can do the following:\n We can install our dependencies, if added using poetry install. Install packages for production with poetry add \u0026lt;a-name\u0026gt; Install packages for development with poetry add \u0026lt;a-name\u0026gt; --dev Remove packages with poetry remove \u0026lt;a-name\u0026gt; Show packages with poetry show  Also, if we need to run an existing project, we can do poetry init to create the .toml file.\nEasy as a-b-c.\n","permalink":"http://rafasacaan.github.io/pots-and-pans/posts/conda-poetry/","summary":"Whenever starting a new project, it is good to get started as nice and easy as possible. The fundamental bricks for this task is to generate an environment and a basic tree of files and directories. And of course, the necessary tools to keep things working from then on.\nConda, the environment-maker-manager. Let´s create the most basic python environment, where the most important thing is to have a defined working python version.","title":"Conda + Poetry"},{"content":"Lately, while working at different data science projects, I have seen myself repeated times in the situation of guiding others to build python environments and on top, a specific set of dependencies. Suddenly, I realized that for me this was never a trivial task: to create, mantain and handle on a working python environment.\nAfter searching the web, I have found that this task can be tackled by, first, setting the foundations: a python environment, and second, build a house that fits your needs: packages and dependencies.\nThe foundations: python An easy way to create a python environment is using the pyenv library, but specifically the pyenv-virtualenv package will make our lives so much easier. Lets install it in our local system (macosx):\nbrew install pyenv-virtualenv Once installed, you can add different python versions to pyenv in order to make them available as a foundation for our future python environments. For example, let\u0026rsquo;s add version 3.8.8:\npyenv install 3.8.8 Now, let\u0026rsquo;s try and create our first environment.\npyenv virtualenv 3.8.8 my_first_env As you can see, we have provided the python version required and a name for our environment. If an error occurs and your env could not be created, try adding the following two lines to your .bash_profile:\neval \u0026#34;$(pyenv init -)\u0026#34; eval \u0026#34;$(pyenv virtualenv-init -)\u0026#34; Perfect! Now that you have created your first env, you can activate/deactivate it by typing:\npyenv activate my_first_env pyenv deactivate You can check your created python envs by typing pyenv virtualenvs and check the python version once inside with pyenv version. You can also remove an env with pyenv uninstall bye_bye_env.\nGreat! Solid foundations have been stablished.\nThe house: poetry for dependencies After setting the foundations, we need to build our house based on different modules that must fit each other. Here is where poetry shines and will become your perfect dependency manager. Check their website and install it with the following command:\ncurl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py | python - Make sure it was correctly installed by typing poetry --version.\nNow, we can got to our favorite directory and create a new project.\npoetry new first_project We can now add, search and remove python packages by typing:\npoetry add \u0026lt;package\u0026gt; poetry search \u0026lt;package\u0026gt; poetry remove \u0026lt;package\u0026gt; You can also tell poetry which python env to use by providing the path\npoetry env use /usr/bin/python3 and enter the virtual env by running\npoetry shell and exit with\nexit To build from a poetry.lock file\npoetry install To update env\npoetry update To export to requirements.txt file:\npoetry export -f requirements.txt -o requirements.txt Check/delete poetry python envs:\npoetry env list poetry env remove /full/path/to/python Check for poetry dependencies\npoetry show That\u0026rsquo;s it!\n","permalink":"http://rafasacaan.github.io/pots-and-pans/posts/poetry-starters/","summary":"Lately, while working at different data science projects, I have seen myself repeated times in the situation of guiding others to build python environments and on top, a specific set of dependencies. Suddenly, I realized that for me this was never a trivial task: to create, mantain and handle on a working python environment.\nAfter searching the web, I have found that this task can be tackled by, first, setting the foundations: a python environment, and second, build a house that fits your needs: packages and dependencies.","title":"Poetry for starters"},{"content":"Remember, remember\u0026hellip;\u0026hellip;\na = c * 7  def hola():  \u0026#34;\u0026#34;\u0026#34; ahjahsjas \u0026#34;\u0026#34;\u0026#34;  a = 3 * tu  return hey dsada dasd asd adas fdaf sfadadasdasd.\n","permalink":"http://rafasacaan.github.io/pots-and-pans/posts/first-blog/","summary":"Remember, remember\u0026hellip;\u0026hellip;\na = c * 7  def hola():  \u0026#34;\u0026#34;\u0026#34; ahjahsjas \u0026#34;\u0026#34;\u0026#34;  a = 3 * tu  return hey dsada dasd asd adas fdaf sfadadasdasd.","title":"trees and rainbows"}]